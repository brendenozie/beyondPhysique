// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-arm64-openssl-1.1.x", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String   @db.ObjectId
}

model User {
  id                    String         @id @default(auto()) @map("_id") @db.ObjectId
  name                  String?
  email                 String?        @unique
  emailVerified         DateTime?
  image                 String?
  hashedPassword        String?
  role                  String         @default("user")
  gender                String         @default("male")
  exerciseGoal          String         @default("keep fit")
  focusArea             String         @default("arms")
  currentHeightInCm     Int            @default(0)
  currentWeightInKg     Float          @default(0.0)
  birthYear             Int            @default(0)
  weeklyGoalInKM        Float          @default(0.0)
  weightInKgGoal        Float          @default(0.0)
  physicalActivityLevel String         @default("beginner")
  bmiResult             Float          @default(0.0)
  imgUri                String?        @default("")
  accounts              Account[]
  sessions              Session[]
  Testimonials          Testimonials[]
  UsersCategory         UsersCategory? @relation(fields: [usersCategoryId], references: [id])
  usersCategoryId       String?        @db.ObjectId

  Conversation   Conversation? @relation(fields: [conversationId], references: [id])
  conversationId String?       @db.ObjectId

  messages Message[]

  seenMessageIds String[]  @db.ObjectId
  seenMessages   Message[] @relation("Seen", fields: [seenMessageIds], references: [id])

  Transaction Transaction[]
}

model SubscriptionPlan {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String        @unique
  description String?
  price       Float
  duration    String // e.g., "Monthly", "Quarterly", "Yearly"
  Transaction Transaction[]
}

model Transaction {
  id                 String            @id @default(auto()) @map("_id") @db.ObjectId
  amount             Float
  currency           String
  status             String // e.g., "pending", "completed", "failed","active"
  user               User              @relation(fields: [userId], references: [id])
  userId             String            @db.ObjectId
  subscriptionPlan   SubscriptionPlan? @relation(fields: [subscriptionPlanId], references: [id])
  subscriptionPlanId String?           @db.ObjectId
  createdAt          DateTime          @default(now())
  startingAt         DateTime          @default(now())
  endingAt           DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Exercise {
  id                 String             @id @default(auto()) @map("_id") @db.ObjectId
  exName             String
  exDesc             String             @unique
  exPic              String
  exVideo            String
  exDuration         String
  exSteps            ExSteps[]
  reps               String
  sets               String
  weightPerRepInKg   Float?             @default(0.0)
  weightPerSetInKg   Float?             @default(0.0)
  breakSet           String             @default("5s")
  status             String
  exerciseCategoryId String             @db.ObjectId
  userId             String?            @db.ObjectId
  exCalories         String
  exHeartBeat        String
  focusArea          String[]
  type               String             @default("others")
  level              String             @default("Beginner")
  caloriesPerRep     String?            @default("0.0 kcal")
  isPremium          Boolean?           @default(false)
  ExerciseActivity   ExerciseActivity[]
  ExerciseCategory   ExerciseCategory?  @relation(fields: [exerciseCategoryId], references: [id])
}

model FoodPlan {
  id                 String            @id @default(auto()) @map("_id") @db.ObjectId
  fp_name            String
  fp_description     String
  fp_period          String
  fp_day             String
  fp_time            String
  FoodPlanCategory   FoodPlanCategory? @relation(fields: [foodPlanCategoryId], references: [id])
  foodPlanCategoryId String?           @db.ObjectId
  fp_ingredients     String[]
  fp_nutriton        String[]
  fp_recipe          String[]
  fp_prep_time       String
  fp_cook_time       String
  fp_image           String?
  fp_video           String?
  owner              String?
  users              String[]
  status             String
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  message   String
  createdAt DateTime @default(now())
  read      Boolean  @default(false)
}

model DailyPlan {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  dpDay      String
  dpTime     String
  dpDuration String
  status     String
  userId     String?  @db.ObjectId
  exerciseId String[] @db.ObjectId
}

model FoodPlanCategory {
  id       String     @id @default(auto()) @map("_id") @db.ObjectId
  fpc_name String?
  status   String     @default("active")
  FoodPlan FoodPlan[]
}

model ExerciseCategory {
  id       String     @id @default(auto()) @map("_id") @db.ObjectId
  excName  String
  image    String
  status   String
  Exercise Exercise[]
}

model FocusArea {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String
}

model ProgramsCategory {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  pcName String
  pcDesc String
  image  String
  status String
}

model PaymentPlans {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  plFeatures  String[]
  plDuration  String
  plFeeAmount String
  status      String
}

model Testimonials {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  testComment String
  publicId    String @unique
  User        User   @relation(fields: [userId], references: [id])
  status      String
  userId      String @db.ObjectId
}

model UsersCategory {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  ucName String
  status String
  User   User[]
}

model TrainingProgram {
  id                 String             @id @default(auto()) @map("_id") @db.ObjectId
  trainingName       String
  trainingDesc       String
  trainingDay        String
  trainingTime       String
  trainingDuration   String
  trainingPeriod     String
  trainingCalories   String
  status             String?            @default("active")
  trainingImage      String
  trainer            String[]
  focus              String[]
  programsCategoryId String             @db.ObjectId
  trainees           String[]
  exercises          String[]
  TrainingProgress   TrainingProgress[]
}

model Sets {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  repCount     String
  status       String
  WorkoutItems WorkoutItems[]
}

model WorkoutItems {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  wkIName  String
  wkWeight String?
  status   String
  Sets     Sets?   @relation(fields: [setsId], references: [id])
  setsId   String? @db.ObjectId
}

type ExSteps {
  name        String
  description String
}

model ExerciseActivity {
  id                  String             @id @default(auto()) @map("_id") @db.ObjectId
  exerciseId          String             @db.ObjectId
  challengeId         String?            @db.ObjectId
  programId           String?            @db.ObjectId
  acRepCount          Int?
  acCalories          Int
  acSetCount          Int?
  type                String?            @default("exercise")
  avgSpeedInKMH       Float              @default(0)
  weightPerRepInKg    Float?             @default(0.0)
  weightPerSetInKg    Float?             @default(0.0)
  distanceInMeters    Int                @default(0)
  durationInMillis    Int                @default(0)
  stepsCount          Int                @default(0) // New field for tracking steps
  userId              String             @db.ObjectId
  timestamp           DateTime           @default(now()) @map("timestamp")
  ChallengeProgress   ChallengeProgress? @relation(fields: [challengeProgressId], references: [id])
  challengeProgressId String?            @db.ObjectId
  exercise            Exercise           @relation(fields: [exerciseId], references: [id])
}

model ChallengeProgress {
  id                    String             @id @default(auto()) @map("_id") @db.ObjectId
  userId                String             @db.ObjectId
  challengeId           String             @db.ObjectId // Nullable if it's a training program
  completedExercises    Int                @default(0)
  totalExercises        Int // Total number of exercises for the challenge or program
  totalCaloriesBurned   Int                @default(0)
  totalDurationInMillis Int                @default(0)
  totalDistanceInMeters Int                @default(0)
  status                String             @default("IN_PROGRESS") // IN_PROGRESS, COMPLETED
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  challenge             WorkoutChallenges  @relation(fields: [challengeId], references: [id])
  ExerciseActivity      ExerciseActivity[]
}

model TrainingProgress {
  id                    String          @id @default(auto()) @map("_id") @db.ObjectId
  userId                String          @db.ObjectId
  programId             String          @db.ObjectId
  completedExercises    Int             @default(0)
  totalExercises        Int // Total number of exercises for the training program
  totalCaloriesBurned   Int             @default(0)
  totalDurationInMillis Int             @default(0)
  totalDistanceInMeters Int             @default(0)
  status                String          @default("IN_PROGRESS") // IN_PROGRESS, COMPLETED
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  program               TrainingProgram @relation(fields: [programId], references: [id])
}

model Conversation {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime @default(now())
  lastMessageAt DateTime @default(now())
  name          String?
  isGroup       Boolean?

  messagesIds String[]  @db.ObjectId
  messages    Message[]

  userIds String[] @db.ObjectId
  // users   User[]   @relation(fields: [userIds], references: [id])
  User    User[]
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String?
  image     String?
  createdAt DateTime @default(now())

  seenIds String[] @db.ObjectId
  seen    User[]   @relation("Seen", fields: [seenIds], references: [id])

  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderId String @unique @db.ObjectId
  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model Bpm {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  bpmResult Int
  date      DateTime @default(now())
  userId    String   @db.ObjectId
}

model Bmi {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  height String
  weight String
  bmi    String
  date   DateTime @default(now())
  userId String   @db.ObjectId
}

model StepsCount {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  stepsCount      String
  duration        String
  distanceCovered String
  date            DateTime @default(now())
  userId          String   @db.ObjectId
}

model Calories {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  calories String
  date     DateTime @default(now())
  userId   String   @db.ObjectId
}

model Sleep {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  slDuration      String
  slSleepDateTime DateTime @default(now())
  slWakeDateTime  DateTime @default(now())
  userId          String   @db.ObjectId
  createdAt       DateTime @default(now())
}

model WaterIntakeChallenges {
  id               String                         @id @default(auto()) @map("_id") @db.ObjectId
  challengeName    String
  challengeDesc    String
  duration         String
  dailyGoal        String
  totalGoal        String
  dailyQuantity    Float                          @default(0)
  totalQuantity    Float                          @default(0)
  releaseDate      DateTime?                      @default(now())
  endDate          DateTime?                      @default(now())
  progressTracking String
  createdAt        DateTime?                      @default(now())
  progress         WaterIntakeChallengeProgress[]
}

model WorkoutChallenges {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  challengeName     String
  challengeDesc     String
  releaseDate       DateTime?           @default(now())
  endDate           DateTime?           @default(now())
  duration          String
  focus             String[]
  exercises         String[]            @db.ObjectId
  challengeGoal     String
  dailyGoal         Int?
  totalGoal         Int?
  period            String?
  difficultyLevel   String?
  createdBy         String?
  lastUpdated       DateTime?           @default(now())
  createdAt         DateTime?           @default(now())
  ChallengeProgress ChallengeProgress[]
}

model WaterIntakeProgress {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  challengeId String?  @db.ObjectId // Nullable because a user may log water outside of a challenge
  dailyGoal   Float
  type        String?  @default("intake")
  // totalGoal   Int
  dailyIntake Float // Amount of water consumed in liters on a given day
  date        DateTime // Date the water intake is logged
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
}

model WaterIntakeChallengeProgress {
  id            String                 @id @default(auto()) @map("_id") @db.ObjectId
  userId        String                 @db.ObjectId
  challengeId   String                 @db.ObjectId
  currentIntake Float // Total amount of water consumed so far in the challenge (in liters)
  totalGoal     Float // Total goal of water consumption for the entire challenge (in liters)
  dailyGoal     Float // The daily goal in liters
  completedDays Int // Number of days the user met the daily goal
  totalDays     Int // Total number of days in the challenge
  status        String                 @default("IN_PROGRESS") // Status of the challenge ("IN_PROGRESS", "COMPLETED")
  createdAt     DateTime               @default(now()) @map("created_at")
  updatedAt     DateTime               @updatedAt @map("updated_at")
  challenge     WaterIntakeChallenges? @relation(fields: [challengeId], references: [id])
}
